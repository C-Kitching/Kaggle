{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3e0a4923",
   "metadata": {
    "papermill": {
     "duration": 0.018115,
     "end_time": "2023-09-03T00:59:10.234675",
     "exception": false,
     "start_time": "2023-09-03T00:59:10.216560",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Titanic Competition"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34cc1748",
   "metadata": {
    "papermill": {
     "duration": 0.015714,
     "end_time": "2023-09-03T00:59:10.266514",
     "exception": false,
     "start_time": "2023-09-03T00:59:10.250800",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 1. Imports and config"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "58056da5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-09-03T00:59:10.303413Z",
     "iopub.status.busy": "2023-09-03T00:59:10.302268Z",
     "iopub.status.idle": "2023-09-03T00:59:11.991543Z",
     "shell.execute_reply": "2023-09-03T00:59:11.990339Z"
    },
    "papermill": {
     "duration": 1.710333,
     "end_time": "2023-09-03T00:59:11.994833",
     "exception": false,
     "start_time": "2023-09-03T00:59:10.284500",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# essentials\n",
    "import numpy as np\n",
    "import scipy\n",
    "import pandas as pd\n",
    "import datetime\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "\n",
    "# scipy\n",
    "from scipy import stats\n",
    "from scipy.stats import kstest, boxcox, skew, norm, boxcox_normmax, yeojohnson\n",
    "from scipy.special import boxcox1p\n",
    "\n",
    "# models\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.linear_model import SGDClassifier\n",
    "from sklearn.svm import SVC\n",
    "\n",
    "# misc\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "\n",
    "pd.set_option('display.max_columns', None)\n",
    "\n",
    "# Ignore useless warnings\n",
    "import warnings\n",
    "warnings.filterwarnings(action=\"ignore\")\n",
    "pd.options.display.max_seq_items = 8000\n",
    "pd.options.display.max_rows = 8000"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "06a5252c",
   "metadata": {
    "papermill": {
     "duration": 0.015753,
     "end_time": "2023-09-03T00:59:12.026659",
     "exception": false,
     "start_time": "2023-09-03T00:59:12.010906",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 2. EDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "77f8f025",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-09-03T00:59:12.060660Z",
     "iopub.status.busy": "2023-09-03T00:59:12.060200Z",
     "iopub.status.idle": "2023-09-03T00:59:12.091223Z",
     "shell.execute_reply": "2023-09-03T00:59:12.089956Z"
    },
    "papermill": {
     "duration": 0.051671,
     "end_time": "2023-09-03T00:59:12.094344",
     "exception": false,
     "start_time": "2023-09-03T00:59:12.042673",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def read_data():\n",
    "    train = pd.read_csv(\"/kaggle/input/titanic/train.csv\")\n",
    "    test = pd.read_csv(\"/kaggle/input/titanic/test.csv\")\n",
    "    return train, test\n",
    "\n",
    "train, test = read_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b5006b03",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-09-03T00:59:12.130393Z",
     "iopub.status.busy": "2023-09-03T00:59:12.129342Z",
     "iopub.status.idle": "2023-09-03T00:59:12.163333Z",
     "shell.execute_reply": "2023-09-03T00:59:12.161815Z"
    },
    "papermill": {
     "duration": 0.056514,
     "end_time": "2023-09-03T00:59:12.167584",
     "exception": false,
     "start_time": "2023-09-03T00:59:12.111070",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>184</th>\n",
       "      <td>185</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Kink-Heilmann, Miss. Luise Gretchen</td>\n",
       "      <td>female</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>315153</td>\n",
       "      <td>22.0250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>24</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Sloper, Mr. William Thompson</td>\n",
       "      <td>male</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>113788</td>\n",
       "      <td>35.5000</td>\n",
       "      <td>A6</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>766</th>\n",
       "      <td>767</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Brewe, Dr. Arthur Jackson</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>112379</td>\n",
       "      <td>39.6000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>376</th>\n",
       "      <td>377</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Landergren, Miss. Aurora Adelia</td>\n",
       "      <td>female</td>\n",
       "      <td>22.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>C 7077</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74</th>\n",
       "      <td>75</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Bing, Mr. Lee</td>\n",
       "      <td>male</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1601</td>\n",
       "      <td>56.4958</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass                                 Name  \\\n",
       "184          185         1       3  Kink-Heilmann, Miss. Luise Gretchen   \n",
       "23            24         1       1         Sloper, Mr. William Thompson   \n",
       "766          767         0       1            Brewe, Dr. Arthur Jackson   \n",
       "376          377         1       3      Landergren, Miss. Aurora Adelia   \n",
       "74            75         1       3                        Bing, Mr. Lee   \n",
       "\n",
       "        Sex   Age  SibSp  Parch  Ticket     Fare Cabin Embarked  \n",
       "184  female   4.0      0      2  315153  22.0250   NaN        S  \n",
       "23     male  28.0      0      0  113788  35.5000    A6        S  \n",
       "766    male   NaN      0      0  112379  39.6000   NaN        C  \n",
       "376  female  22.0      0      0  C 7077   7.2500   NaN        S  \n",
       "74     male  32.0      0      0    1601  56.4958   NaN        S  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "feea4e45",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-09-03T00:59:12.203122Z",
     "iopub.status.busy": "2023-09-03T00:59:12.202670Z",
     "iopub.status.idle": "2023-09-03T00:59:12.211070Z",
     "shell.execute_reply": "2023-09-03T00:59:12.209761Z"
    },
    "papermill": {
     "duration": 0.029532,
     "end_time": "2023-09-03T00:59:12.213899",
     "exception": false,
     "start_time": "2023-09-03T00:59:12.184367",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(891, 12)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "03ee345a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-09-03T00:59:12.250070Z",
     "iopub.status.busy": "2023-09-03T00:59:12.249593Z",
     "iopub.status.idle": "2023-09-03T00:59:12.270786Z",
     "shell.execute_reply": "2023-09-03T00:59:12.269510Z"
    },
    "papermill": {
     "duration": 0.042533,
     "end_time": "2023-09-03T00:59:12.273744",
     "exception": false,
     "start_time": "2023-09-03T00:59:12.231211",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>215</th>\n",
       "      <td>1107</td>\n",
       "      <td>1</td>\n",
       "      <td>Head, Mr. Christopher</td>\n",
       "      <td>male</td>\n",
       "      <td>42.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>113038</td>\n",
       "      <td>42.5000</td>\n",
       "      <td>B11</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>411</th>\n",
       "      <td>1303</td>\n",
       "      <td>1</td>\n",
       "      <td>Minahan, Mrs. William Edward (Lillian E Thorpe)</td>\n",
       "      <td>female</td>\n",
       "      <td>37.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>19928</td>\n",
       "      <td>90.0000</td>\n",
       "      <td>C78</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>288</th>\n",
       "      <td>1180</td>\n",
       "      <td>3</td>\n",
       "      <td>Mardirosian, Mr. Sarkis</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2655</td>\n",
       "      <td>7.2292</td>\n",
       "      <td>F E46</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>214</th>\n",
       "      <td>1106</td>\n",
       "      <td>3</td>\n",
       "      <td>Andersson, Miss. Ida Augusta Margareta</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>347091</td>\n",
       "      <td>7.7750</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>378</th>\n",
       "      <td>1270</td>\n",
       "      <td>1</td>\n",
       "      <td>Hipkins, Mr. William Edward</td>\n",
       "      <td>male</td>\n",
       "      <td>55.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>680</td>\n",
       "      <td>50.0000</td>\n",
       "      <td>C39</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Pclass                                             Name  \\\n",
       "215         1107       1                            Head, Mr. Christopher   \n",
       "411         1303       1  Minahan, Mrs. William Edward (Lillian E Thorpe)   \n",
       "288         1180       3                          Mardirosian, Mr. Sarkis   \n",
       "214         1106       3           Andersson, Miss. Ida Augusta Margareta   \n",
       "378         1270       1                      Hipkins, Mr. William Edward   \n",
       "\n",
       "        Sex   Age  SibSp  Parch  Ticket     Fare  Cabin Embarked  \n",
       "215    male  42.0      0      0  113038  42.5000    B11        S  \n",
       "411  female  37.0      1      0   19928  90.0000    C78        Q  \n",
       "288    male   NaN      0      0    2655   7.2292  F E46        C  \n",
       "214  female  38.0      4      2  347091   7.7750    NaN        S  \n",
       "378    male  55.0      0      0     680  50.0000    C39        S  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "371f31e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-09-03T00:59:12.310105Z",
     "iopub.status.busy": "2023-09-03T00:59:12.309661Z",
     "iopub.status.idle": "2023-09-03T00:59:12.316987Z",
     "shell.execute_reply": "2023-09-03T00:59:12.315912Z"
    },
    "papermill": {
     "duration": 0.02868,
     "end_time": "2023-09-03T00:59:12.319606",
     "exception": false,
     "start_time": "2023-09-03T00:59:12.290926",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(418, 11)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "731e4a18",
   "metadata": {
    "papermill": {
     "duration": 0.018483,
     "end_time": "2023-09-03T00:59:12.355975",
     "exception": false,
     "start_time": "2023-09-03T00:59:12.337492",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "No columns present in one data set and not in the other which is convinient."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "759a6f06",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-09-03T00:59:12.392294Z",
     "iopub.status.busy": "2023-09-03T00:59:12.391855Z",
     "iopub.status.idle": "2023-09-03T00:59:12.399822Z",
     "shell.execute_reply": "2023-09-03T00:59:12.398527Z"
    },
    "papermill": {
     "duration": 0.03036,
     "end_time": "2023-09-03T00:59:12.403565",
     "exception": false,
     "start_time": "2023-09-03T00:59:12.373205",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n",
      "       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'],\n",
      "      dtype='object')\n",
      "PassengerId      int64\n",
      "Survived         int64\n",
      "Pclass           int64\n",
      "Name            object\n",
      "Sex             object\n",
      "Age            float64\n",
      "SibSp            int64\n",
      "Parch            int64\n",
      "Ticket          object\n",
      "Fare           float64\n",
      "Cabin           object\n",
      "Embarked        object\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "print(train.columns)\n",
    "print(train.dtypes)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "169a8810",
   "metadata": {
    "papermill": {
     "duration": 0.017034,
     "end_time": "2023-09-03T00:59:12.438571",
     "exception": false,
     "start_time": "2023-09-03T00:59:12.421537",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Feautures:\n",
    "- **Survived** (catagorical, int): survival\n",
    "- **pclass** (categorical, int): ticket class 1=1st, 2=2nd, 3=3rd\n",
    "- **sex** (categorical, string): sex\n",
    "- **Age** (numerical continuous, float): age in years\n",
    "- **SibSp** (numerical discrete, int): # of siblings/spouses aboard\n",
    "- **ParCh** (numerical discrete, int): # of parents/children aboard\n",
    "- **ticket** (alpha numeric, string): ticket number\n",
    "- **fare** (numerical continuous, float): passenger fare\n",
    "- **cabin** (alpha numeric, string): cabin number\n",
    "- **embarked** (categorical, string): prot of embarkation C=Cherbourg, Q=Queenstown, S=Southampton"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bec78968",
   "metadata": {
    "papermill": {
     "duration": 0.016961,
     "end_time": "2023-09-03T00:59:12.472752",
     "exception": false,
     "start_time": "2023-09-03T00:59:12.455791",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We drop the ID column as this is useless."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c23f8cb9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-09-03T00:59:12.509116Z",
     "iopub.status.busy": "2023-09-03T00:59:12.508670Z",
     "iopub.status.idle": "2023-09-03T00:59:12.524895Z",
     "shell.execute_reply": "2023-09-03T00:59:12.523613Z"
    },
    "papermill": {
     "duration": 0.037654,
     "end_time": "2023-09-03T00:59:12.527565",
     "exception": false,
     "start_time": "2023-09-03T00:59:12.489911",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((891, 11), (418, 10))"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def drop_ID(X):\n",
    "    \"\"\"\n",
    "    Drop the ID column since it is unique and so useless for ML\n",
    "    \n",
    "    Args:\n",
    "        X (pandas dataframe) : dataframe whose ID col we want to trop\n",
    "    \n",
    "    Returns:\n",
    "        X (pandas dataframe) : dataframe with ID's dropped\n",
    "    \"\"\"\n",
    "    X.drop(['PassengerId'], axis = 1, inplace = True)\n",
    "    return X\n",
    "\n",
    "train = drop_ID(train)\n",
    "test = drop_ID(test)\n",
    "train.shape, test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "adb603bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-09-03T00:59:12.565229Z",
     "iopub.status.busy": "2023-09-03T00:59:12.564783Z",
     "iopub.status.idle": "2023-09-03T00:59:12.579369Z",
     "shell.execute_reply": "2023-09-03T00:59:12.578401Z"
    },
    "papermill": {
     "duration": 0.036262,
     "end_time": "2023-09-03T00:59:12.581891",
     "exception": false,
     "start_time": "2023-09-03T00:59:12.545629",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((891,), (891, 10))"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def drop_target(train, target_name):\n",
    "    \"\"\"\n",
    "    Drop the target from the train data\n",
    "    \n",
    "    Args:\n",
    "        train (pandas dataframe) : train data\n",
    "        target_name (string) : name of target\n",
    "        \n",
    "    Returns:\n",
    "        train (pandas dataframe) : train data with target dropped\n",
    "        y_train (pandas series) : target\n",
    "    \"\"\"\n",
    "    target = train[target_name].reset_index(drop=True)\n",
    "    train = train.drop([target_name], axis=1) # drop the target\n",
    "    return target, train\n",
    "\n",
    "target_name = \"Survived\"\n",
    "target, train = drop_target(train, target_name)\n",
    "target.shape, train.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2685fd43",
   "metadata": {
    "papermill": {
     "duration": 0.017617,
     "end_time": "2023-09-03T00:59:12.618253",
     "exception": false,
     "start_time": "2023-09-03T00:59:12.600636",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The train and test data are then combined so we can do the data cleaning together."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "2910c0a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-09-03T00:59:12.657090Z",
     "iopub.status.busy": "2023-09-03T00:59:12.656665Z",
     "iopub.status.idle": "2023-09-03T00:59:12.672427Z",
     "shell.execute_reply": "2023-09-03T00:59:12.671209Z"
    },
    "papermill": {
     "duration": 0.039346,
     "end_time": "2023-09-03T00:59:12.675414",
     "exception": false,
     "start_time": "2023-09-03T00:59:12.636068",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1309, 10)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def combine_train_and_test(train, test):\n",
    "    \"\"\"\n",
    "    Prepare datasets for cleaning by dropping target and combining into one dataset\n",
    "    \n",
    "    Args:\n",
    "        train (pandas dataframe) : train dataset\n",
    "        test (pandas dataframe) : test dataset\n",
    "    \n",
    "    Returns:\n",
    "        X (pandas dataframe) : combined data\n",
    "    \"\"\"\n",
    "    X = pd.concat([train, test]).reset_index(drop=True) # combine train and test\n",
    "    \n",
    "    return X\n",
    "\n",
    "X = combine_train_and_test(train, test)\n",
    "X.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "90caa184",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-09-03T00:59:12.713705Z",
     "iopub.status.busy": "2023-09-03T00:59:12.713193Z",
     "iopub.status.idle": "2023-09-03T00:59:12.720254Z",
     "shell.execute_reply": "2023-09-03T00:59:12.719005Z"
    },
    "papermill": {
     "duration": 0.029481,
     "end_time": "2023-09-03T00:59:12.722758",
     "exception": false,
     "start_time": "2023-09-03T00:59:12.693277",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def split_train_and_test(X, target):\n",
    "    \"\"\"\n",
    "    Extract the train and test sets from the combined data\n",
    "    \n",
    "    Args:\n",
    "        X (pandas dataframe) : dataframe to split up\n",
    "        target (pandas series) : target data\n",
    "        \n",
    "    Return:\n",
    "        X_test (pandas dataframe) : test data\n",
    "        X_train (pandas dataframe) : train data\n",
    "    \"\"\"\n",
    "    X_train = X.iloc[:len(target), :]\n",
    "    X_test = X.iloc[len(target):, :]\n",
    "    return X_train, X_test"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70ccff8d",
   "metadata": {
    "papermill": {
     "duration": 0.017979,
     "end_time": "2023-09-03T00:59:12.758534",
     "exception": false,
     "start_time": "2023-09-03T00:59:12.740555",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Missing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "7cf5f167",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-09-03T00:59:12.797057Z",
     "iopub.status.busy": "2023-09-03T00:59:12.796559Z",
     "iopub.status.idle": "2023-09-03T00:59:12.833223Z",
     "shell.execute_reply": "2023-09-03T00:59:12.831944Z"
    },
    "papermill": {
     "duration": 0.059688,
     "end_time": "2023-09-03T00:59:12.836064",
     "exception": false,
     "start_time": "2023-09-03T00:59:12.776376",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>zeros</th>\n",
       "      <th>np.nan</th>\n",
       "      <th>None</th>\n",
       "      <th>total</th>\n",
       "      <th>Percent</th>\n",
       "      <th>Type</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Feature</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Cabin</th>\n",
       "      <td>0</td>\n",
       "      <td>1014</td>\n",
       "      <td>0</td>\n",
       "      <td>1014</td>\n",
       "      <td>77.463713</td>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Parch</th>\n",
       "      <td>1002</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1002</td>\n",
       "      <td>76.546982</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SibSp</th>\n",
       "      <td>891</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "      <td>68.067227</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>0</td>\n",
       "      <td>263</td>\n",
       "      <td>0</td>\n",
       "      <td>263</td>\n",
       "      <td>20.091673</td>\n",
       "      <td>float64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fare</th>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>1.375095</td>\n",
       "      <td>float64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Embarked</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.152788</td>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Name</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ticket</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>object</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          zeros  np.nan  None  total    Percent     Type\n",
       "Feature                                                 \n",
       "Cabin         0    1014     0   1014  77.463713   object\n",
       "Parch      1002       0     0   1002  76.546982    int64\n",
       "SibSp       891       0     0    891  68.067227    int64\n",
       "Age           0     263     0    263  20.091673  float64\n",
       "Fare         17       1     0     18   1.375095  float64\n",
       "Embarked      0       2     0      2   0.152788   object\n",
       "Pclass        0       0     0      0   0.000000    int64\n",
       "Name          0       0     0      0   0.000000   object\n",
       "Sex           0       0     0      0   0.000000   object\n",
       "Ticket        0       0     0      0   0.000000   object"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def percent_missing(data):\n",
    "    \"\"\"\n",
    "    Characterise missing data in a dataframe\n",
    "    \n",
    "    Args:\n",
    "        df (pandas dataframe) : dataframe we want to inspect\n",
    "    \n",
    "    Returns:\n",
    "        miss_df()\n",
    "    \"\"\"\n",
    "    miss_df = ((data == 0).sum()).to_frame()\n",
    "    miss_df = miss_df.rename(columns = {0: 'zeros'})\n",
    "    miss_df.index.name = 'Feature'\n",
    "    miss_df['np.nan'] = (data.isnull()).sum()\n",
    "    miss_df['None'] = (data == \"None\").sum()\n",
    "    miss_df['total'] = miss_df['zeros'] + miss_df['np.nan'] + miss_df['None']\n",
    "    miss_df['Percent'] = 100*miss_df['total']/len(data)\n",
    "    miss_df['Type'] = [data[i].dtype for i in miss_df.index ]\n",
    "    return miss_df.sort_values(ascending = False, by = 'Percent')\n",
    "\n",
    "miss_all = percent_missing(X)\n",
    "miss_all"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b7bd385",
   "metadata": {
    "papermill": {
     "duration": 0.01776,
     "end_time": "2023-09-03T00:59:12.871979",
     "exception": false,
     "start_time": "2023-09-03T00:59:12.854219",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Observations:\n",
    "- The age feature has around 20% of it's values missing. It is likely an important feature so will try to fill these\n",
    "- Cabin has almost 80% missing, which is probably too much, so likely drop this feature entirely\n",
    "- Embarked has only 2 entries missing, which will have very little effect"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f7c933f",
   "metadata": {
    "papermill": {
     "duration": 0.017686,
     "end_time": "2023-09-03T00:59:12.907813",
     "exception": false,
     "start_time": "2023-09-03T00:59:12.890127",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Predictions:\n",
    "- Sex: females are more likely to survive\n",
    "- Age: young children are more likely to survive\n",
    "- SibSp/ParCh: people traveling alone are more likely to survive\n",
    "- pclass: people of higher socioeconomic class are more likely to survive"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57aa58ec",
   "metadata": {
    "papermill": {
     "duration": 0.017766,
     "end_time": "2023-09-03T00:59:12.943621",
     "exception": false,
     "start_time": "2023-09-03T00:59:12.925855",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 3. Data visualisation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "87ec3c2e",
   "metadata": {
    "papermill": {
     "duration": 0.017846,
     "end_time": "2023-09-03T00:59:12.979576",
     "exception": false,
     "start_time": "2023-09-03T00:59:12.961730",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Can visualise the data to see if our predictions are accurate."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c117b947",
   "metadata": {
    "papermill": {
     "duration": 0.017512,
     "end_time": "2023-09-03T00:59:13.015108",
     "exception": false,
     "start_time": "2023-09-03T00:59:12.997596",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Sex feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "34ea7c33",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-09-03T00:59:13.053418Z",
     "iopub.status.busy": "2023-09-03T00:59:13.052995Z",
     "iopub.status.idle": "2023-09-03T00:59:13.335571Z",
     "shell.execute_reply": "2023-09-03T00:59:13.334542Z"
    },
    "papermill": {
     "duration": 0.305239,
     "end_time": "2023-09-03T00:59:13.338370",
     "exception": false,
     "start_time": "2023-09-03T00:59:13.033131",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percentage of females who survived:  74.20382165605095\n",
      "Percentage of male who survived:  18.890814558058924\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x = 'Sex', y = target, data = X)\n",
    "print(\"Percentage of females who survived: \", target[train[\"Sex\"]=='female'].value_counts(normalize = True)[1]*100)\n",
    "print(\"Percentage of male who survived: \", target[train[\"Sex\"]=='male'].value_counts(normalize = True)[1]*100)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cfe65605",
   "metadata": {
    "papermill": {
     "duration": 0.019013,
     "end_time": "2023-09-03T00:59:13.382336",
     "exception": false,
     "start_time": "2023-09-03T00:59:13.363323",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "As predicted, females have a much higher chance of survival than males. The sex feature is essential in predictions."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de5d13a5",
   "metadata": {
    "papermill": {
     "duration": 0.018218,
     "end_time": "2023-09-03T00:59:13.419186",
     "exception": false,
     "start_time": "2023-09-03T00:59:13.400968",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### pclass feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "8a3dc159",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-09-03T00:59:13.459501Z",
     "iopub.status.busy": "2023-09-03T00:59:13.458548Z",
     "iopub.status.idle": "2023-09-03T00:59:13.725885Z",
     "shell.execute_reply": "2023-09-03T00:59:13.724685Z"
    },
    "papermill": {
     "duration": 0.290802,
     "end_time": "2023-09-03T00:59:13.728977",
     "exception": false,
     "start_time": "2023-09-03T00:59:13.438175",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percentage of 1st class who survived:  62.96296296296296\n",
      "Percentage of 2nd class who survived:  47.28260869565217\n",
      "Percentage of 3rd class who survived:  24.236252545824847\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x='Pclass', y = target, data = X)\n",
    "print(\"Percentage of 1st class who survived: \", target[train[\"Pclass\"] == 1].value_counts(normalize=True)[1]*100)\n",
    "print(\"Percentage of 2nd class who survived: \", target[train[\"Pclass\"] == 2].value_counts(normalize=True)[1]*100)\n",
    "print(\"Percentage of 3rd class who survived: \", target[train[\"Pclass\"] == 3].value_counts(normalize=True)[1]*100)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f4bdbf79",
   "metadata": {
    "papermill": {
     "duration": 0.01915,
     "end_time": "2023-09-03T00:59:13.767735",
     "exception": false,
     "start_time": "2023-09-03T00:59:13.748585",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "As predicted, people with a higher socioeconomic class have a higher rate of survival."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19bda71c",
   "metadata": {
    "papermill": {
     "duration": 0.01934,
     "end_time": "2023-09-03T00:59:13.806130",
     "exception": false,
     "start_time": "2023-09-03T00:59:13.786790",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### SibSp feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "98b4af1d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-09-03T00:59:13.846837Z",
     "iopub.status.busy": "2023-09-03T00:59:13.845279Z",
     "iopub.status.idle": "2023-09-03T00:59:14.285618Z",
     "shell.execute_reply": "2023-09-03T00:59:14.284552Z"
    },
    "papermill": {
     "duration": 0.463189,
     "end_time": "2023-09-03T00:59:14.288335",
     "exception": false,
     "start_time": "2023-09-03T00:59:13.825146",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='SibSp', ylabel='Survived'>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x='SibSp', y = target, data = X)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e9b0a00",
   "metadata": {
    "papermill": {
     "duration": 0.01874,
     "end_time": "2023-09-03T00:59:14.326134",
     "exception": false,
     "start_time": "2023-09-03T00:59:14.307394",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "In general, we see that people with more siblings and spouses aboard were less likely to survive. However people with 0 are actually less likely to survive than 1, 2 or 3. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dab77edb",
   "metadata": {
    "papermill": {
     "duration": 0.018674,
     "end_time": "2023-09-03T00:59:14.364011",
     "exception": false,
     "start_time": "2023-09-03T00:59:14.345337",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Parch feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "06ff89e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-09-03T00:59:14.404308Z",
     "iopub.status.busy": "2023-09-03T00:59:14.403811Z",
     "iopub.status.idle": "2023-09-03T00:59:14.834225Z",
     "shell.execute_reply": "2023-09-03T00:59:14.832863Z"
    },
    "papermill": {
     "duration": 0.454323,
     "end_time": "2023-09-03T00:59:14.837537",
     "exception": false,
     "start_time": "2023-09-03T00:59:14.383214",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Parch', ylabel='Survived'>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x = 'Parch', y = target, data = X)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a5cbc73",
   "metadata": {
    "papermill": {
     "duration": 0.019056,
     "end_time": "2023-09-03T00:59:14.876378",
     "exception": false,
     "start_time": "2023-09-03T00:59:14.857322",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "People travelling alone are less likely to survive than those with 1-3 parents or children. Those with 5 children are much less likely to survive."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "650b5ce1",
   "metadata": {
    "papermill": {
     "duration": 0.019014,
     "end_time": "2023-09-03T00:59:14.915019",
     "exception": false,
     "start_time": "2023-09-03T00:59:14.896005",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Age feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "ecafe1f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-09-03T00:59:14.957808Z",
     "iopub.status.busy": "2023-09-03T00:59:14.957365Z",
     "iopub.status.idle": "2023-09-03T00:59:15.489622Z",
     "shell.execute_reply": "2023-09-03T00:59:15.488297Z"
    },
    "papermill": {
     "duration": 0.556794,
     "end_time": "2023-09-03T00:59:15.492408",
     "exception": false,
     "start_time": "2023-09-03T00:59:14.935614",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='AgeGroup', ylabel='Survived'>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "age_df = train.copy()\n",
    "age_df[\"Age\"] = age_df[\"Age\"].fillna(-0.5)\n",
    "bins = [-1, 0, 5, 12, 18, 24, 35, 60, np.inf]\n",
    "labels = ['Unknown', 'Baby', 'Child', 'Teenager', 'Student', 'Young Adult', 'Adult', 'Senior']\n",
    "age_df[\"AgeGroup\"] = pd.cut(age_df[\"Age\"], bins, labels = labels)\n",
    "fig = plt.figure(figsize = (10, 5))\n",
    "sns.barplot(x = 'AgeGroup', y = target, data = age_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6df9424d",
   "metadata": {
    "papermill": {
     "duration": 0.019783,
     "end_time": "2023-09-03T00:59:15.532862",
     "exception": false,
     "start_time": "2023-09-03T00:59:15.513079",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The suvival rate across age ranges is quite uniform. Except for babies which have a much higher chance of survival and seniors which have a slightly lower chance, as one might expect."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9824322f",
   "metadata": {
    "papermill": {
     "duration": 0.019414,
     "end_time": "2023-09-03T00:59:15.571899",
     "exception": false,
     "start_time": "2023-09-03T00:59:15.552485",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Cabin feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "e8f80b97",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-09-03T00:59:15.614018Z",
     "iopub.status.busy": "2023-09-03T00:59:15.613222Z",
     "iopub.status.idle": "2023-09-03T00:59:15.890036Z",
     "shell.execute_reply": "2023-09-03T00:59:15.889101Z"
    },
    "papermill": {
     "duration": 0.301033,
     "end_time": "2023-09-03T00:59:15.892713",
     "exception": false,
     "start_time": "2023-09-03T00:59:15.591680",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='CabinBool', ylabel='Survived'>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cabin_df = X.copy()\n",
    "cabin_df[\"CabinBool\"] = X[\"Cabin\"].notnull().astype('int')\n",
    "sns.barplot(x = \"CabinBool\", y = target, data = cabin_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e982ec3b",
   "metadata": {
    "papermill": {
     "duration": 0.021097,
     "end_time": "2023-09-03T00:59:15.934575",
     "exception": false,
     "start_time": "2023-09-03T00:59:15.913478",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "People who had a recorded cabin number were almost twice as likely to survive, likey a socioeconomic factor."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d04d6e9",
   "metadata": {
    "papermill": {
     "duration": 0.019983,
     "end_time": "2023-09-03T00:59:15.974813",
     "exception": false,
     "start_time": "2023-09-03T00:59:15.954830",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 5. Data cleaning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "1fdea5f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-09-03T00:59:16.019308Z",
     "iopub.status.busy": "2023-09-03T00:59:16.018198Z",
     "iopub.status.idle": "2023-09-03T00:59:16.057010Z",
     "shell.execute_reply": "2023-09-03T00:59:16.055721Z"
    },
    "papermill": {
     "duration": 0.063702,
     "end_time": "2023-09-03T00:59:16.060020",
     "exception": false,
     "start_time": "2023-09-03T00:59:15.996318",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def handle_missing(X):\n",
    "    \n",
    "    # drop useless features\n",
    "    X.drop([\"Ticket\", \"Name\", \"Cabin\"], axis = 1, inplace = True)\n",
    "\n",
    "    # fill median after group transform\n",
    "    X['Age'] = X.groupby(['Pclass','Sex'])['Age'].transform(lambda x: x.fillna(x.median()))\n",
    "    X['Fare'] = X.groupby(['Pclass','Sex'])['Fare'].transform(lambda x: x.fillna(x.median()))\n",
    "    X[\"Embarked\"] = X.groupby([\"Pclass\", \"Sex\"])[\"Embarked\"].transform(lambda x: x.fillna(x.mode()[0]))\n",
    "\n",
    "    # encode categorical\n",
    "    X['Sex'].replace({'male':0, 'female':1}, inplace=True)\n",
    "    X['Embarked'].replace({'S':0, 'C':1, 'Q':2}, inplace=True)\n",
    "    \n",
    "    return X\n",
    "\n",
    "X = handle_missing(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d64a45a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-09-03T00:59:16.103473Z",
     "iopub.status.busy": "2023-09-03T00:59:16.102961Z",
     "iopub.status.idle": "2023-09-03T00:59:16.131487Z",
     "shell.execute_reply": "2023-09-03T00:59:16.130048Z"
    },
    "papermill": {
     "duration": 0.053254,
     "end_time": "2023-09-03T00:59:16.134097",
     "exception": false,
     "start_time": "2023-09-03T00:59:16.080843",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>zeros</th>\n",
       "      <th>np.nan</th>\n",
       "      <th>None</th>\n",
       "      <th>total</th>\n",
       "      <th>Percent</th>\n",
       "      <th>Type</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Feature</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Parch</th>\n",
       "      <td>1002</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1002</td>\n",
       "      <td>76.546982</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Embarked</th>\n",
       "      <td>914</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>914</td>\n",
       "      <td>69.824293</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SibSp</th>\n",
       "      <td>891</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>891</td>\n",
       "      <td>68.067227</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <td>843</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>843</td>\n",
       "      <td>64.400306</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fare</th>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>1.298701</td>\n",
       "      <td>float64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>float64</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          zeros  np.nan  None  total    Percent     Type\n",
       "Feature                                                 \n",
       "Parch      1002       0     0   1002  76.546982    int64\n",
       "Embarked    914       0     0    914  69.824293    int64\n",
       "SibSp       891       0     0    891  68.067227    int64\n",
       "Sex         843       0     0    843  64.400306    int64\n",
       "Fare         17       0     0     17   1.298701  float64\n",
       "Pclass        0       0     0      0   0.000000    int64\n",
       "Age           0       0     0      0   0.000000  float64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "miss_all = percent_missing(X)\n",
    "miss_all"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "28e5f43a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-09-03T00:59:16.178260Z",
     "iopub.status.busy": "2023-09-03T00:59:16.177339Z",
     "iopub.status.idle": "2023-09-03T00:59:16.193926Z",
     "shell.execute_reply": "2023-09-03T00:59:16.192670Z"
    },
    "papermill": {
     "duration": 0.041866,
     "end_time": "2023-09-03T00:59:16.196787",
     "exception": false,
     "start_time": "2023-09-03T00:59:16.154921",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>182</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>31.3875</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>781</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>17.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>57.0000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>804</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6.9750</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>445</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>81.8583</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>398</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10.5000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Pclass  Sex   Age  SibSp  Parch     Fare  Embarked\n",
       "182       3    0   9.0      4      2  31.3875         0\n",
       "781       1    1  17.0      1      0  57.0000         0\n",
       "804       3    0  27.0      0      0   6.9750         0\n",
       "445       1    0   4.0      0      2  81.8583         0\n",
       "398       2    0  23.0      0      0  10.5000         0"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.sample(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a505220",
   "metadata": {
    "papermill": {
     "duration": 0.020542,
     "end_time": "2023-09-03T00:59:16.238283",
     "exception": false,
     "start_time": "2023-09-03T00:59:16.217741",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Modelling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "239966e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-09-03T00:59:16.282690Z",
     "iopub.status.busy": "2023-09-03T00:59:16.281813Z",
     "iopub.status.idle": "2023-09-03T00:59:16.290894Z",
     "shell.execute_reply": "2023-09-03T00:59:16.289793Z"
    },
    "papermill": {
     "duration": 0.034505,
     "end_time": "2023-09-03T00:59:16.293569",
     "exception": false,
     "start_time": "2023-09-03T00:59:16.259064",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((891, 7), (418, 7), (891,))"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# decouple the train and test data\n",
    "train, test = split_train_and_test(X, target)\n",
    "train.shape, test.shape, target.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "c2089eae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-09-03T00:59:16.338473Z",
     "iopub.status.busy": "2023-09-03T00:59:16.337594Z",
     "iopub.status.idle": "2023-09-03T00:59:16.345359Z",
     "shell.execute_reply": "2023-09-03T00:59:16.344501Z"
    },
    "papermill": {
     "duration": 0.033345,
     "end_time": "2023-09-03T00:59:16.348002",
     "exception": false,
     "start_time": "2023-09-03T00:59:16.314657",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train, X_val, y_train, y_val = train_test_split(train, target, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "83d5958f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-09-03T00:59:16.393909Z",
     "iopub.status.busy": "2023-09-03T00:59:16.393025Z",
     "iopub.status.idle": "2023-09-03T00:59:16.399419Z",
     "shell.execute_reply": "2023-09-03T00:59:16.398575Z"
    },
    "papermill": {
     "duration": 0.03302,
     "end_time": "2023-09-03T00:59:16.401975",
     "exception": false,
     "start_time": "2023-09-03T00:59:16.368955",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def score(model, X_train, y_train, X_val, y_val):\n",
    "    model.fit(X_train, y_train)\n",
    "    prediction = model.predict(X_val)\n",
    "    return accuracy_score(y_val, prediction)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "0ef667ba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-09-03T00:59:16.446743Z",
     "iopub.status.busy": "2023-09-03T00:59:16.446270Z",
     "iopub.status.idle": "2023-09-03T00:59:16.892773Z",
     "shell.execute_reply": "2023-09-03T00:59:16.891299Z"
    },
    "papermill": {
     "duration": 0.472699,
     "end_time": "2023-09-03T00:59:16.895761",
     "exception": false,
     "start_time": "2023-09-03T00:59:16.423062",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model  0 : LogisticRegression(random_state=42, solver='liblinear')\n",
      "ACC:  0.8044692737430168\n",
      "Model  1 : GradientBoostingClassifier()\n",
      "ACC:  0.8156424581005587\n",
      "Model  2 : RandomForestClassifier()\n",
      "ACC:  0.8156424581005587\n",
      "Model  3 : SGDClassifier()\n",
      "ACC:  0.776536312849162\n",
      "Model  4 : SVC()\n",
      "ACC:  0.6536312849162011\n"
     ]
    }
   ],
   "source": [
    "#Lets some models\n",
    "model1 = LogisticRegression(solver='liblinear', random_state=42)\n",
    "model2 = GradientBoostingClassifier()\n",
    "model3 = RandomForestClassifier()\n",
    "model4 = SGDClassifier()\n",
    "model5 = SVC()\n",
    "\n",
    "models = [model1, model2, model3, model4, model5]\n",
    "for i, model in enumerate(models):\n",
    "    print(\"Model \", i,\":\", model)\n",
    "    print(\"ACC: \", score(model, X_train, y_train, X_val, y_val))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "4be86ce4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-09-03T00:59:16.942966Z",
     "iopub.status.busy": "2023-09-03T00:59:16.942069Z",
     "iopub.status.idle": "2023-09-03T00:59:17.062049Z",
     "shell.execute_reply": "2023-09-03T00:59:17.060811Z"
    },
    "papermill": {
     "duration": 0.146835,
     "end_time": "2023-09-03T00:59:17.064903",
     "exception": false,
     "start_time": "2023-09-03T00:59:16.918068",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8100558659217877"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = GradientBoostingClassifier(min_samples_split=20, min_samples_leaf=60, max_depth=3, max_features=7)\n",
    "score(model, X_train, y_train, X_val, y_val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "aad1adeb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-09-03T00:59:17.110159Z",
     "iopub.status.busy": "2023-09-03T00:59:17.109729Z",
     "iopub.status.idle": "2023-09-03T00:59:59.498755Z",
     "shell.execute_reply": "2023-09-03T00:59:59.497350Z"
    },
    "papermill": {
     "duration": 42.4158,
     "end_time": "2023-09-03T00:59:59.502167",
     "exception": false,
     "start_time": "2023-09-03T00:59:17.086367",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "gb_classifier = GradientBoostingClassifier(\n",
    "    n_estimators=100,  # Number of boosting stages (trees)\n",
    "    learning_rate=0.1,  # Step size shrinkage to prevent overfitting\n",
    "    max_depth=3,  # Maximum depth of individual trees\n",
    "    min_samples_split=2,  # Minimum number of samples to split a node\n",
    "    min_samples_leaf=1,  # Minimum number of samples to form a leaf node\n",
    "    max_features=None,  # Number of features to consider for splitting\n",
    "    random_state=42\n",
    ")\n",
    "\n",
    "param_grid = {\n",
    "    'n_estimators': [100, 200, 300],\n",
    "    'learning_rate': [0.01, 0.1, 0.2],\n",
    "    'max_depth': [3, 4, 5]\n",
    "}\n",
    "\n",
    "grid_search = GridSearchCV(estimator=gb_classifier, param_grid=param_grid, cv=5, scoring='accuracy')\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "best_params = grid_search.best_params_\n",
    "best_model = grid_search.best_estimator_\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "c2108955",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-09-03T00:59:59.548708Z",
     "iopub.status.busy": "2023-09-03T00:59:59.547488Z",
     "iopub.status.idle": "2023-09-03T00:59:59.796756Z",
     "shell.execute_reply": "2023-09-03T00:59:59.795356Z"
    },
    "papermill": {
     "duration": 0.275622,
     "end_time": "2023-09-03T00:59:59.799753",
     "exception": false,
     "start_time": "2023-09-03T00:59:59.524131",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8435754189944135"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "score(best_model, X_train, y_train, X_val, y_val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c475e8ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-09-03T00:59:59.846819Z",
     "iopub.status.busy": "2023-09-03T00:59:59.846328Z",
     "iopub.status.idle": "2023-09-03T00:59:59.872871Z",
     "shell.execute_reply": "2023-09-03T00:59:59.871537Z"
    },
    "papermill": {
     "duration": 0.054086,
     "end_time": "2023-09-03T00:59:59.875697",
     "exception": false,
     "start_time": "2023-09-03T00:59:59.821611",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your submission was successfully saved!\n"
     ]
    }
   ],
   "source": [
    "predictions = best_model.predict(test)\n",
    "test = pd.read_csv('/kaggle/input/titanic/test.csv')\n",
    "output = pd.DataFrame({'PassengerId': test[\"PassengerId\"], 'Survived': predictions})\n",
    "output.to_csv('my_submission.csv', index=False)\n",
    "print(\"Your submission was successfully saved!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1eb42183",
   "metadata": {
    "papermill": {
     "duration": 0.021823,
     "end_time": "2023-09-03T00:59:59.920016",
     "exception": false,
     "start_time": "2023-09-03T00:59:59.898193",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "kernelspec": {
  "display_name": "Python 3",
  "language": "python",
  "name": "python3"
 },
 "language_info": {
  "codemirror_mode": {
   "name": "ipython",
   "version": 3
  },
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "nbconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": "3.6.4"
 },
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 62.909627,
   "end_time": "2023-09-03T01:00:00.866198",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2023-09-03T00:58:57.956571",
   "version": "2.3.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
